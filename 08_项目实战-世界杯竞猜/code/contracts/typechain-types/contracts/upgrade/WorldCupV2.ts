/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface WorldCupV2Interface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeDeadline(uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "countryToPlayers(uint8,uint8,uint256)": FunctionFragment;
    "currRound()": FunctionFragment;
    "deadline()": FunctionFragment;
    "finialize(uint8)": FunctionFragment;
    "getCountryPlayters(uint8,uint8)": FunctionFragment;
    "getPlayerInfo(uint8,address,uint8)": FunctionFragment;
    "getVaultBalance()": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "lockedAmts()": FunctionFragment;
    "play(uint8)": FunctionFragment;
    "winnerVaults(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeDeadline"
      | "claimReward"
      | "countryToPlayers"
      | "currRound"
      | "deadline"
      | "finialize"
      | "getCountryPlayters"
      | "getPlayerInfo"
      | "getVaultBalance"
      | "initialize"
      | "lockedAmts"
      | "play"
      | "winnerVaults"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeDeadline",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countryToPlayers",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "currRound", values?: undefined): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finialize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountryPlayters",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedAmts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "winnerVaults",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countryToPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCountryPlayters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedAmts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerVaults",
    data: BytesLike
  ): Result;

  events: {
    "ChangeDeadline(uint256,uint256)": EventFragment;
    "ClaimReward(address,uint256)": EventFragment;
    "Finialize(uint8,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Play(uint8,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeDeadline"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Play"): EventFragment;
}

export interface ChangeDeadlineEventObject {
  _prev: BigNumber;
  _curr: BigNumber;
}
export type ChangeDeadlineEvent = TypedEvent<
  [BigNumber, BigNumber],
  ChangeDeadlineEventObject
>;

export type ChangeDeadlineEventFilter = TypedEventFilter<ChangeDeadlineEvent>;

export interface ClaimRewardEventObject {
  _claimer: string;
  _amt: BigNumber;
}
export type ClaimRewardEvent = TypedEvent<
  [string, BigNumber],
  ClaimRewardEventObject
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface FinializeEventObject {
  _currRound: number;
  _country: BigNumber;
}
export type FinializeEvent = TypedEvent<
  [number, BigNumber],
  FinializeEventObject
>;

export type FinializeEventFilter = TypedEventFilter<FinializeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PlayEventObject {
  _currRound: number;
  _player: string;
  _country: number;
}
export type PlayEvent = TypedEvent<[number, string, number], PlayEventObject>;

export type PlayEventFilter = TypedEventFilter<PlayEvent>;

export interface WorldCupV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorldCupV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    changeDeadline(
      _newDeadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    countryToPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currRound(overrides?: CallOverrides): Promise<[number]>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    finialize(
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCountryPlayters(
      _round: PromiseOrValue<BigNumberish>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerInfo(
      _round: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _counts: BigNumber }>;

    getVaultBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal: BigNumber }>;

    initialize(
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockedAmts(overrides?: CallOverrides): Promise<[BigNumber]>;

    play(
      _selected: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    winnerVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  changeDeadline(
    _newDeadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  countryToPlayers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  currRound(overrides?: CallOverrides): Promise<number>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  finialize(
    _country: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCountryPlayters(
    _round: PromiseOrValue<BigNumberish>,
    _country: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerInfo(
    _round: PromiseOrValue<BigNumberish>,
    _player: PromiseOrValue<string>,
    _country: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultBalance(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockedAmts(overrides?: CallOverrides): Promise<BigNumber>;

  play(
    _selected: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  winnerVaults(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeDeadline(
      _newDeadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    countryToPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    currRound(overrides?: CallOverrides): Promise<number>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    finialize(
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCountryPlayters(
      _round: PromiseOrValue<BigNumberish>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerInfo(
      _round: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedAmts(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      _selected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    winnerVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ChangeDeadline(uint256,uint256)"(
      _prev?: null,
      _curr?: null
    ): ChangeDeadlineEventFilter;
    ChangeDeadline(_prev?: null, _curr?: null): ChangeDeadlineEventFilter;

    "ClaimReward(address,uint256)"(
      _claimer?: null,
      _amt?: null
    ): ClaimRewardEventFilter;
    ClaimReward(_claimer?: null, _amt?: null): ClaimRewardEventFilter;

    "Finialize(uint8,uint256)"(
      _currRound?: null,
      _country?: null
    ): FinializeEventFilter;
    Finialize(_currRound?: null, _country?: null): FinializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Play(uint8,address,uint8)"(
      _currRound?: null,
      _player?: null,
      _country?: null
    ): PlayEventFilter;
    Play(_currRound?: null, _player?: null, _country?: null): PlayEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeDeadline(
      _newDeadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    countryToPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currRound(overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    finialize(
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCountryPlayters(
      _round: PromiseOrValue<BigNumberish>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerInfo(
      _round: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockedAmts(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      _selected: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    winnerVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeDeadline(
      _newDeadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    countryToPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finialize(
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCountryPlayters(
      _round: PromiseOrValue<BigNumberish>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerInfo(
      _round: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockedAmts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      _selected: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    winnerVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
