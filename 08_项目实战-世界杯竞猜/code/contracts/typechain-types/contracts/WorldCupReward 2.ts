/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface WorldCupRewardInterface extends utils.Interface {
  functions: {
    "acceptOwner()": FunctionFragment;
    "banana()": FunctionFragment;
    "claim(address,uint8,uint256,uint256,bytes,bytes)": FunctionFragment;
    "emergency()": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "setEmergency(bool)": FunctionFragment;
    "setPendingOwner(address)": FunctionFragment;
    "setSigner(address,bool)": FunctionFragment;
    "signers(address)": FunctionFragment;
    "usedNonce(bytes)": FunctionFragment;
    "verify(address,uint8,uint256,uint256,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwner"
      | "banana"
      | "claim"
      | "emergency"
      | "emergencyWithdraw"
      | "owner"
      | "pendingOwner"
      | "setEmergency"
      | "setPendingOwner"
      | "setSigner"
      | "signers"
      | "usedNonce"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "banana", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "emergency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergency",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedNonce",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "banana", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emergency", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usedNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "Claim(address,uint8,uint256,bytes)": EventFragment;
    "NewOwner(address,address)": EventFragment;
    "NewPendingOwner(address,address)": EventFragment;
    "SetEmergency(bool)": EventFragment;
    "SetSigner(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmergency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSigner"): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  useFor: number;
  amount: BigNumber;
  nonce: string;
}
export type ClaimEvent = TypedEvent<
  [string, number, BigNumber, string],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface NewOwnerEventObject {
  oldOwner: string;
  newOwner: string;
}
export type NewOwnerEvent = TypedEvent<[string, string], NewOwnerEventObject>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface NewPendingOwnerEventObject {
  oldPendingOwner: string;
  newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<
  [string, string],
  NewPendingOwnerEventObject
>;

export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;

export interface SetEmergencyEventObject {
  emergency: boolean;
}
export type SetEmergencyEvent = TypedEvent<[boolean], SetEmergencyEventObject>;

export type SetEmergencyEventFilter = TypedEventFilter<SetEmergencyEvent>;

export interface SetSignerEventObject {
  signer: string;
  state: boolean;
}
export type SetSignerEvent = TypedEvent<
  [string, boolean],
  SetSignerEventObject
>;

export type SetSignerEventFilter = TypedEventFilter<SetSignerEvent>;

export interface WorldCupReward extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorldCupRewardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    banana(overrides?: CallOverrides): Promise<[string]>;

    claim(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergency(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    setEmergency(
      emergency_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      signer: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    usedNonce(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  acceptOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  banana(overrides?: CallOverrides): Promise<string>;

  claim(
    user: PromiseOrValue<string>,
    useFor: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    expireAt: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergency(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  setEmergency(
    emergency_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingOwner(
    newPendingOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    signer: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  usedNonce(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify(
    user: PromiseOrValue<string>,
    useFor: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    expireAt: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    acceptOwner(overrides?: CallOverrides): Promise<void>;

    banana(overrides?: CallOverrides): Promise<string>;

    claim(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergency(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    setEmergency(
      emergency_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      signer: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    usedNonce(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Claim(address,uint8,uint256,bytes)"(
      user?: PromiseOrValue<string> | null,
      useFor?: null,
      amount?: null,
      nonce?: null
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      useFor?: null,
      amount?: null,
      nonce?: null
    ): ClaimEventFilter;

    "NewOwner(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;
    NewOwner(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;

    "NewPendingOwner(address,address)"(
      oldPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;
    NewPendingOwner(
      oldPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;

    "SetEmergency(bool)"(emergency?: null): SetEmergencyEventFilter;
    SetEmergency(emergency?: null): SetEmergencyEventFilter;

    "SetSigner(address,bool)"(
      signer?: null,
      state?: null
    ): SetSignerEventFilter;
    SetSigner(signer?: null, state?: null): SetSignerEventFilter;
  };

  estimateGas: {
    acceptOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    banana(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergency(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    setEmergency(
      emergency_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      signer: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usedNonce(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    banana(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmergency(
      emergency_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      signer: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usedNonce(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      user: PromiseOrValue<string>,
      useFor: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      expireAt: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
