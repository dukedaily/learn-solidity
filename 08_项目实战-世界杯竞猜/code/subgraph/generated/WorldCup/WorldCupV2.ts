// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChangeDeadline extends ethereum.Event {
  get params(): ChangeDeadline__Params {
    return new ChangeDeadline__Params(this);
  }
}

export class ChangeDeadline__Params {
  _event: ChangeDeadline;

  constructor(event: ChangeDeadline) {
    this._event = event;
  }

  get _prev(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newDeadline(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimReward extends ethereum.Event {
  get params(): ClaimReward__Params {
    return new ClaimReward__Params(this);
  }
}

export class ClaimReward__Params {
  _event: ClaimReward;

  constructor(event: ClaimReward) {
    this._event = event;
  }

  get _claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Finialize extends ethereum.Event {
  get params(): Finialize__Params {
    return new Finialize__Params(this);
  }
}

export class Finialize__Params {
  _event: Finialize;

  constructor(event: Finialize) {
    this._event = event;
  }

  get _currRound(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _country(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Play extends ethereum.Event {
  get params(): Play__Params {
    return new Play__Params(this);
  }
}

export class Play__Params {
  _event: Play;

  constructor(event: Play) {
    this._event = event;
  }

  get _currRound(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _country(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class WorldCupV2 extends ethereum.SmartContract {
  static bind(address: Address): WorldCupV2 {
    return new WorldCupV2("WorldCupV2", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  changeCount(): BigInt {
    let result = super.call("changeCount", "changeCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_changeCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("changeCount", "changeCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countryToPlayers(param0: i32, param1: i32, param2: BigInt): Address {
    let result = super.call(
      "countryToPlayers",
      "countryToPlayers(uint8,uint8,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_countryToPlayers(
    param0: i32,
    param1: i32,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "countryToPlayers",
      "countryToPlayers(uint8,uint8,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currRound(): i32 {
    let result = super.call("currRound", "currRound():(uint8)", []);

    return result[0].toI32();
  }

  try_currRound(): ethereum.CallResult<i32> {
    let result = super.tryCall("currRound", "currRound():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deadline(): BigInt {
    let result = super.call("deadline", "deadline():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deadline", "deadline():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCountryPlayters(_round: i32, _country: i32): BigInt {
    let result = super.call(
      "getCountryPlayters",
      "getCountryPlayters(uint8,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_round)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_country))
      ]
    );

    return result[0].toBigInt();
  }

  try_getCountryPlayters(
    _round: i32,
    _country: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCountryPlayters",
      "getCountryPlayters(uint8,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_round)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_country))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayerInfo(_round: i32, _player: Address, _country: i32): BigInt {
    let result = super.call(
      "getPlayerInfo",
      "getPlayerInfo(uint8,address,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_round)),
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_country))
      ]
    );

    return result[0].toBigInt();
  }

  try_getPlayerInfo(
    _round: i32,
    _player: Address,
    _country: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPlayerInfo",
      "getPlayerInfo(uint8,address,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_round)),
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_country))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultBalance(): BigInt {
    let result = super.call(
      "getVaultBalance",
      "getVaultBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVaultBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultBalance",
      "getVaultBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedAmts(): BigInt {
    let result = super.call("lockedAmts", "lockedAmts():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedAmts(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockedAmts", "lockedAmts():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winnerVaults(param0: Address): BigInt {
    let result = super.call("winnerVaults", "winnerVaults(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_winnerVaults(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "winnerVaults",
      "winnerVaults(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ChangeDeadlineCall extends ethereum.Call {
  get inputs(): ChangeDeadlineCall__Inputs {
    return new ChangeDeadlineCall__Inputs(this);
  }

  get outputs(): ChangeDeadlineCall__Outputs {
    return new ChangeDeadlineCall__Outputs(this);
  }
}

export class ChangeDeadlineCall__Inputs {
  _call: ChangeDeadlineCall;

  constructor(call: ChangeDeadlineCall) {
    this._call = call;
  }

  get _newDeadline(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeDeadlineCall__Outputs {
  _call: ChangeDeadlineCall;

  constructor(call: ChangeDeadlineCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class FinializeCall extends ethereum.Call {
  get inputs(): FinializeCall__Inputs {
    return new FinializeCall__Inputs(this);
  }

  get outputs(): FinializeCall__Outputs {
    return new FinializeCall__Outputs(this);
  }
}

export class FinializeCall__Inputs {
  _call: FinializeCall;

  constructor(call: FinializeCall) {
    this._call = call;
  }

  get _country(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class FinializeCall__Outputs {
  _call: FinializeCall;

  constructor(call: FinializeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _deadline(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PlayCall extends ethereum.Call {
  get inputs(): PlayCall__Inputs {
    return new PlayCall__Inputs(this);
  }

  get outputs(): PlayCall__Outputs {
    return new PlayCall__Outputs(this);
  }
}

export class PlayCall__Inputs {
  _call: PlayCall;

  constructor(call: PlayCall) {
    this._call = call;
  }

  get _selected(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class PlayCall__Outputs {
  _call: PlayCall;

  constructor(call: PlayCall) {
    this._call = call;
  }
}
