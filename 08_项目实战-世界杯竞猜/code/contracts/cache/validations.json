{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/upgrade/WorldCupV1.sol:WorldCupV1": {
        "src": "contracts/upgrade/WorldCupV1.sol:7",
        "version": {
          "withMetadata": "dd63e12742a65c751912b97b4bf3aafa90eba68b23cef43e6e635da7f712b8c8",
          "withoutMetadata": "e433880ff3257a3011ffde898d23414c4a3aa80f4c0debb525f238879d3ff07b",
          "linkedWithoutMetadata": "e433880ff3257a3011ffde898d23414c4a3aa80f4c0debb525f238879d3ff07b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "initialize(uint256)",
          "play(uint8)",
          "finialize(uint8)",
          "claimReward()",
          "getVaultBalance()",
          "getCountryPlayters(uint8,uint8)",
          "getPlayerInfo(uint8,address,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:16"
            },
            {
              "label": "currRound",
              "offset": 22,
              "slot": "0",
              "type": "t_uint8",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:17"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)532_storage))",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:25"
            },
            {
              "label": "countryToPlayers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_mapping(t_enum(Country)491,t_array(t_address)dyn_storage))",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:27"
            },
            {
              "label": "winnerVaults",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:32"
            },
            {
              "label": "deadline",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:36"
            },
            {
              "label": "lockedAmts",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Country)491": {
              "label": "enum WorldCupV1.Country",
              "members": [
                "GERMANY",
                "FRANCH",
                "CHINA",
                "BRAZIL",
                "KOREA"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Player)532_storage)": {
              "label": "mapping(address => struct WorldCupV1.Player)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)491,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum WorldCupV1.Country => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)491,t_uint256)": {
              "label": "mapping(enum WorldCupV1.Country => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)532_storage))": {
              "label": "mapping(uint8 => mapping(address => struct WorldCupV1.Player))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_enum(Country)491,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint8 => mapping(enum WorldCupV1.Country => address[]))",
              "numberOfBytes": "32"
            },
            "t_struct(Player)532_storage": {
              "label": "struct WorldCupV1.Player",
              "members": [
                {
                  "label": "isSet",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "counts",
                  "type": "t_mapping(t_enum(Country)491,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/upgrade/WorldCupV2.sol:WorldCupV2": {
        "src": "contracts/upgrade/WorldCupV2.sol:7",
        "version": {
          "withMetadata": "66c6276091a779baacc74b48fa094b52a994f03d36364d87b21072056683d098",
          "withoutMetadata": "8529beaaeb6cc68d0cc9d91866af116a3fa242ed496bb59ae05ba05ba0efaba4",
          "linkedWithoutMetadata": "8529beaaeb6cc68d0cc9d91866af116a3fa242ed496bb59ae05ba05ba0efaba4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "initialize(uint256)",
          "play(uint8)",
          "finialize(uint8)",
          "claimReward()",
          "changeDeadline(uint256)",
          "getVaultBalance()",
          "getCountryPlayters(uint8,uint8)",
          "getPlayerInfo(uint8,address,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:16"
            },
            {
              "label": "currRound",
              "offset": 22,
              "slot": "0",
              "type": "t_uint8",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:17"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)981_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:25"
            },
            {
              "label": "countryToPlayers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_mapping(t_enum(Country)934,t_array(t_address)dyn_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:27"
            },
            {
              "label": "winnerVaults",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:31"
            },
            {
              "label": "deadline",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:34"
            },
            {
              "label": "lockedAmts",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:36"
            },
            {
              "label": "changeCount",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Country)934": {
              "label": "enum WorldCupV2.Country",
              "members": [
                "GERMANY",
                "FRANCH",
                "CHINA",
                "BRAZIL",
                "KOREA"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Player)981_storage)": {
              "label": "mapping(address => struct WorldCupV2.Player)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)934,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum WorldCupV2.Country => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)934,t_uint256)": {
              "label": "mapping(enum WorldCupV2.Country => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)981_storage))": {
              "label": "mapping(uint8 => mapping(address => struct WorldCupV2.Player))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_enum(Country)934,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint8 => mapping(enum WorldCupV2.Country => address[]))",
              "numberOfBytes": "32"
            },
            "t_struct(Player)981_storage": {
              "label": "struct WorldCupV2.Player",
              "members": [
                {
                  "label": "isSet",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "counts",
                  "type": "t_mapping(t_enum(Country)934,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/verifySignature.sol:VerifySignature": {
        "src": "contracts/verifySignature.sol:4",
        "version": {
          "withMetadata": "fafa368d05b7b7b3227f147bfbd519c76c37247f11f6cb690e806a251a3993e4",
          "withoutMetadata": "0495fc6150cfb71faad6e470c32eab7ec92ad8d9d1a40faf187ed39f96195278",
          "linkedWithoutMetadata": "0495fc6150cfb71faad6e470c32eab7ec92ad8d9d1a40faf187ed39f96195278"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMessageHash(address,uint256)",
          "getEthSignedMessageHash(bytes32)",
          "verify(bytes32,bytes,address)",
          "recoverSigner(bytes32,bytes)",
          "splitSignature(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "56c1d0de2c6f18372a0eaa2f9c2f09d977158d44fbb38f25169d3e2e8e4de5b2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/upgrade/WorldCupV2.sol:WorldCupV2": {
        "src": "contracts/upgrade/WorldCupV2.sol:7",
        "version": {
          "withMetadata": "0c4d4e16c968ef658b13e99e16944c685ffaba7c2d6c524248744cd941cad99d",
          "withoutMetadata": "1b14890c961d6a102d788ef5b9103a9c36abdbe723cfd3832ec63862ec09146b",
          "linkedWithoutMetadata": "1b14890c961d6a102d788ef5b9103a9c36abdbe723cfd3832ec63862ec09146b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "initialize(uint256)",
          "play(uint8)",
          "finialize(uint8)",
          "claimReward()",
          "changeDeadline(uint256)",
          "getVaultBalance()",
          "getCountryPlayters(uint8,uint8)",
          "getPlayerInfo(uint8,address,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:16"
            },
            {
              "label": "currRound",
              "offset": 22,
              "slot": "0",
              "type": "t_uint8",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:17"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)540_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:26"
            },
            {
              "label": "countryToPlayers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_mapping(t_enum(Country)493,t_array(t_address)dyn_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:28"
            },
            {
              "label": "winnerVaults",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:32"
            },
            {
              "label": "deadline",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:42"
            },
            {
              "label": "lockedAmts",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:44"
            },
            {
              "label": "changeCount",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Country)493": {
              "label": "enum WorldCupV2.Country",
              "members": [
                "GERMANY",
                "FRANCH",
                "CHINA",
                "BRAZIL",
                "KOREA"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Player)540_storage)": {
              "label": "mapping(address => struct WorldCupV2.Player)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)493,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum WorldCupV2.Country => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)493,t_uint256)": {
              "label": "mapping(enum WorldCupV2.Country => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)540_storage))": {
              "label": "mapping(uint8 => mapping(address => struct WorldCupV2.Player))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_enum(Country)493,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint8 => mapping(enum WorldCupV2.Country => address[]))",
              "numberOfBytes": "32"
            },
            "t_struct(Player)540_storage": {
              "label": "struct WorldCupV2.Player",
              "members": [
                {
                  "label": "isSet",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "counts",
                  "type": "t_mapping(t_enum(Country)493,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "56c1d0de2c6f18372a0eaa2f9c2f09d977158d44fbb38f25169d3e2e8e4de5b2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/upgrade/WorldCupV2.sol:WorldCupV2": {
        "src": "contracts/upgrade/WorldCupV2.sol:7",
        "version": {
          "withMetadata": "0c4d4e16c968ef658b13e99e16944c685ffaba7c2d6c524248744cd941cad99d",
          "withoutMetadata": "1b14890c961d6a102d788ef5b9103a9c36abdbe723cfd3832ec63862ec09146b",
          "linkedWithoutMetadata": "1b14890c961d6a102d788ef5b9103a9c36abdbe723cfd3832ec63862ec09146b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "initialize(uint256)",
          "play(uint8)",
          "finialize(uint8)",
          "claimReward()",
          "changeDeadline(uint256)",
          "getVaultBalance()",
          "getCountryPlayters(uint8,uint8)",
          "getPlayerInfo(uint8,address,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:16"
            },
            {
              "label": "currRound",
              "offset": 22,
              "slot": "0",
              "type": "t_uint8",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:17"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)540_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:26"
            },
            {
              "label": "countryToPlayers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_mapping(t_enum(Country)493,t_array(t_address)dyn_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:28"
            },
            {
              "label": "winnerVaults",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:32"
            },
            {
              "label": "deadline",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:42"
            },
            {
              "label": "lockedAmts",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:44"
            },
            {
              "label": "changeCount",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Country)493": {
              "label": "enum WorldCupV2.Country",
              "members": [
                "GERMANY",
                "FRANCH",
                "CHINA",
                "BRAZIL",
                "KOREA"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Player)540_storage)": {
              "label": "mapping(address => struct WorldCupV2.Player)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)493,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum WorldCupV2.Country => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)493,t_uint256)": {
              "label": "mapping(enum WorldCupV2.Country => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)540_storage))": {
              "label": "mapping(uint8 => mapping(address => struct WorldCupV2.Player))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_enum(Country)493,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint8 => mapping(enum WorldCupV2.Country => address[]))",
              "numberOfBytes": "32"
            },
            "t_struct(Player)540_storage": {
              "label": "struct WorldCupV2.Player",
              "members": [
                {
                  "label": "isSet",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "counts",
                  "type": "t_mapping(t_enum(Country)493,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "56c1d0de2c6f18372a0eaa2f9c2f09d977158d44fbb38f25169d3e2e8e4de5b2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "2adafe9949c9eac3b63c5a50ef9b209c88f2f1e21ebf5e893575b024bc40f353",
          "withoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc",
          "linkedWithoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "a6c2bcb2fe5bc4e2588dca468f0cddc6b8e4f5dff25b26d33af33df20a301389",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "df71be82ce971eefb917ca1ce80a6ec5e6aabf39c0247a73ec7ecef0f93e9215",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "e2c813dc04e6f8435004c3228c78029cf9f1302286bc7d58bbad617b174187a8",
          "withoutMetadata": "4feaa558c949fa6f714e530bc74b2d62da568e343c77ce553b321f02d3af2e6a",
          "linkedWithoutMetadata": "4feaa558c949fa6f714e530bc74b2d62da568e343c77ce553b321f02d3af2e6a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlockTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lock",
              "src": "contracts/Lock.sol:8"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "Lock",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/WorldCup.sol:WorldCup": {
        "src": "contracts/WorldCup.sol:6",
        "version": {
          "withMetadata": "0ba2afee3e4e4e82faa3035f4434193963a73cfda158ad72696ffeac70d8f12d",
          "withoutMetadata": "63c588c39f7b6c8ae71eec8ac5094f2abb81ba9072b23b9039957e2db195bf2e",
          "linkedWithoutMetadata": "63c588c39f7b6c8ae71eec8ac5094f2abb81ba9072b23b9039957e2db195bf2e"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "(uint256)",
          "play(uint8)",
          "finialize(uint8)",
          "claimReward()",
          "getVaultBalance()",
          "getCountryPlayters(uint8,uint8)",
          "getPlayerInfo(uint8,address,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WorldCup",
            "src": "contracts/WorldCup.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "countries",
            "src": "contracts/WorldCup.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "deadline",
            "src": "contracts/WorldCup.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "admin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WorldCup",
              "src": "contracts/WorldCup.sol:15"
            },
            {
              "label": "currRound",
              "offset": 20,
              "slot": "0",
              "type": "t_uint8",
              "contract": "WorldCup",
              "src": "contracts/WorldCup.sol:15"
            },
            {
              "label": "countries",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "WorldCup",
              "src": "contracts/WorldCup.sol:17"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)1942_storage))",
              "contract": "WorldCup",
              "src": "contracts/WorldCup.sol:18"
            },
            {
              "label": "countryToPlayers",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_mapping(t_enum(Country)1901,t_array(t_address)dyn_storage))",
              "contract": "WorldCup",
              "src": "contracts/WorldCup.sol:20"
            },
            {
              "label": "winnerVaults",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WorldCup",
              "src": "contracts/WorldCup.sol:24"
            },
            {
              "label": "lockedAmts",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WorldCup",
              "src": "contracts/WorldCup.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Country)1901": {
              "label": "enum WorldCup.Country",
              "members": [
                "GERMANY",
                "FRANCH",
                "CHINA",
                "BRAZIL",
                "KOREA"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Player)1942_storage)": {
              "label": "mapping(address => struct WorldCup.Player)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)1901,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum WorldCup.Country => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)1901,t_uint256)": {
              "label": "mapping(enum WorldCup.Country => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)1942_storage))": {
              "label": "mapping(uint8 => mapping(address => struct WorldCup.Player))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_enum(Country)1901,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint8 => mapping(enum WorldCup.Country => address[]))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Player)1942_storage": {
              "label": "struct WorldCup.Player",
              "members": [
                {
                  "label": "isSet",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "counts",
                  "type": "t_mapping(t_enum(Country)1901,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/WorldCupDistributor.sol:WorldCupDistributor": {
        "src": "contracts/WorldCupDistributor.sol:9",
        "version": {
          "withMetadata": "9e747b65321051bbaaa26c4fe452700d6d3f923b347952af28ceaf68467cb7e1",
          "withoutMetadata": "74418eec2f59bd1cf874f2ab41286ebb31b841542d101af53f3178862c6fb4cf",
          "linkedWithoutMetadata": "74418eec2f59bd1cf874f2ab41286ebb31b841542d101af53f3178862c6fb4cf"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper",
          "contracts/libraries/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "(address)",
          "distributeReward(uint256,uint256,uint256,bytes32)",
          "claim(uint256,uint256,bytes32[])",
          "isClaimed(uint256,address)",
          "claimRestTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WorldCupDistributor",
            "src": "contracts/WorldCupDistributor.sol:46"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/WorldCupDistributor.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "WorldCupDistributor",
              "src": "contracts/WorldCupDistributor.sol:13"
            },
            {
              "label": "claimedState",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "WorldCupDistributor",
              "src": "contracts/WorldCupDistributor.sol:14"
            },
            {
              "label": "merkleDistributors",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(MerkleDistributor)2348_storage)dyn_storage",
              "contract": "WorldCupDistributor",
              "src": "contracts/WorldCupDistributor.sol:35"
            },
            {
              "label": "claimedBitMap",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "WorldCupDistributor",
              "src": "contracts/WorldCupDistributor.sol:38"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "WorldCupDistributor",
              "src": "contracts/WorldCupDistributor.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(MerkleDistributor)2348_storage)dyn_storage": {
              "label": "struct WorldCupDistributor.MerkleDistributor[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(MerkleDistributor)2348_storage": {
              "label": "struct WorldCupDistributor.MerkleDistributor",
              "members": [
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "settleBlockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/WorldCupReward.sol:WorldCupReward": {
        "src": "contracts/WorldCupReward.sol:10",
        "version": {
          "withMetadata": "ce8f441a179b1a5dad2d5f06992c24a605f0162cdfff111af49361d60eb0592b",
          "withoutMetadata": "eba8624f34cc349556a86dc22c44ca004dd7b4a85e05453fbddcdf8489386b78",
          "linkedWithoutMetadata": "eba8624f34cc349556a86dc22c44ca004dd7b4a85e05453fbddcdf8489386b78"
        },
        "inherit": [
          "contracts/utils/Ownable.sol:Ownable",
          "contracts/utils/Reentrant.sol:Reentrant"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "setSigner(address,bool)",
          "setEmergency(bool)",
          "emergencyWithdraw(address,uint256)",
          "claim(address,uint8,uint256,uint256,bytes,bytes)",
          "verify(address,uint8,uint256,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WorldCupReward",
            "src": "contracts/WorldCupReward.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "entered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Reentrant",
              "src": "contracts/utils/Reentrant.sol:5"
            },
            {
              "label": "owner",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/utils/Ownable.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/utils/Ownable.sol:6"
            },
            {
              "label": "banana",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WorldCupReward",
              "src": "contracts/WorldCupReward.sol:17"
            },
            {
              "label": "emergency",
              "offset": 20,
              "slot": "2",
              "type": "t_bool",
              "contract": "WorldCupReward",
              "src": "contracts/WorldCupReward.sol:18"
            },
            {
              "label": "signers",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "WorldCupReward",
              "src": "contracts/WorldCupReward.sol:19"
            },
            {
              "label": "usedNonce",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "WorldCupReward",
              "src": "contracts/WorldCupReward.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/interfaces/IMerkleDistributor.sol:IMerkleDistributor": {
        "src": "contracts/interfaces/IMerkleDistributor.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token()",
          "merkleRoot()",
          "isClaimed(uint256)",
          "claim(uint256,address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/MerkleProof.sol:MerkleProof": {
        "src": "contracts/libraries/MerkleProof.sol:7",
        "version": {
          "withMetadata": "5dc4c38472b4641972384869a9e0dd902e81c7486f6084989ffed5740bbaef5d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "8b27543c663c8711f04903bd4cbb96c5b9920714762f97ebbbb4d5e09d8f646b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/WorldCupToken.sol:WorldCupToken": {
        "src": "contracts/tokens/WorldCupToken.sol:7",
        "version": {
          "withMetadata": "fbaee4301f6560ba5ebc284593d98d6867338195c5ca91d85ee12081fcab714d",
          "withoutMetadata": "3f516d628114be5e19e928c190af610f7757b5bc5824b125f1b2e339a55d3c35",
          "linkedWithoutMetadata": "3f516d628114be5e19e928c190af610f7757b5bc5824b125f1b2e339a55d3c35"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WorldCupToken",
            "src": "contracts/tokens/WorldCupToken.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/mockToken/FHTToken.sol:FHTToken": {
        "src": "contracts/tokens/mockToken/FHTToken.sol:6",
        "version": {
          "withMetadata": "ef9a1534b4e6320a776f9185cd0bcc3c07e78a4f2bbfcfdb9fcab4f5fbe1ca6f",
          "withoutMetadata": "ea8dd76bdcb2415cce7f35c83741c7253ef6dd5875300f05830d8a463ea92801",
          "linkedWithoutMetadata": "ea8dd76bdcb2415cce7f35c83741c7253ef6dd5875300f05830d8a463ea92801"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FHTToken",
            "src": "contracts/tokens/mockToken/FHTToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:Address": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:557",
        "version": {
          "withMetadata": "e03c43969a9487adc86a85ccb541b65c5221fe318814959e05258be99f713ec3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:716"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:BoredApeYachtClub": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1907",
        "version": {
          "withMetadata": "d8eebdfa0b1e5c4d3156966fcb00186b31af1841f2c5ebcf78fe60c678aaa78f",
          "withoutMetadata": "3bed0b1a8e508feea777db1c28beaf60125a12f1b93e54b03b1ecb64f41076cd",
          "linkedWithoutMetadata": "3bed0b1a8e508feea777db1c28beaf60125a12f1b93e54b03b1ecb64f41076cd"
        },
        "inherit": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:Ownable",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:ERC721",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721Enumerable",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721Metadata",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:ERC165",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC165",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:Context"
        ],
        "libraries": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:SafeMath"
        ],
        "methods": [
          "(string,string,uint256,uint256)",
          "withdraw()",
          "reserveApes()",
          "setRevealTimestamp(uint256)",
          "setProvenanceHash(string)",
          "setBaseURI(string)",
          "flipSaleState()",
          "mintApe(uint256)",
          "setStartingIndex()",
          "emergencySetStartingIndexBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BoredApeYachtClub",
            "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1927"
          },
          {
            "kind": "state-variable-assignment",
            "name": "BAYC_PROVENANCE",
            "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1910"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleIsActive",
            "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1923"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:297"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)4569_storage)",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1379"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)5014_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1382"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1385"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1388"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1391"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1394"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1397"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1845"
            },
            {
              "label": "BAYC_PROVENANCE",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "BoredApeYachtClub",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1910"
            },
            {
              "label": "startingIndexBlock",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "BoredApeYachtClub",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1912"
            },
            {
              "label": "startingIndex",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "BoredApeYachtClub",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1914"
            },
            {
              "label": "MAX_APES",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "BoredApeYachtClub",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1921"
            },
            {
              "label": "saleIsActive",
              "offset": 0,
              "slot": "15",
              "type": "t_bool",
              "contract": "BoredApeYachtClub",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1923"
            },
            {
              "label": "REVEAL_TIMESTAMP",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "BoredApeYachtClub",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1925"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)4676_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)4569_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)4685_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4676_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)4676_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4165_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)4569_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4165_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)5014_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4685_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:Context": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:ERC165": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:288",
        "inherit": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:299"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:297"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:ERC721": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1367",
        "version": {
          "withMetadata": "2689f4a9bdf3aa4f420a928da546a40e83378fd41d2ba6285f2c8d0e497b0ee9",
          "withoutMetadata": "68817727c39e0d114b0d7d3675b98a32d574dc1ffa1d87fb6350b8fbbc1e7caf",
          "linkedWithoutMetadata": "68817727c39e0d114b0d7d3675b98a32d574dc1ffa1d87fb6350b8fbbc1e7caf"
        },
        "inherit": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721Enumerable",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721Metadata",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:ERC165",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC165",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:Context"
        ],
        "libraries": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:SafeMath",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:Address",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:EnumerableSet",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:EnumerableMap",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1439"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:297"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)4569_storage)",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1379"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)5014_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1382"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1385"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1388"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1391"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1394"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1397"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)4676_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)4569_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)4685_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4676_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)4676_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4165_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)4569_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4165_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)5014_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4685_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:EnumerableMap": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1070",
        "version": {
          "withMetadata": "923b48c8ca87684b8a7b93e5e65dd32490adccbf3f61be20d39f14df5feac040",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:EnumerableSet": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:770",
        "version": {
          "withMetadata": "288d70a8689041a44bcb75db34e3807569ca02f9ef2c2b38ab1142a79788b591",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC165": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:70",
        "inherit": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721Enumerable": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:231",
        "inherit": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721Metadata": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:202",
        "inherit": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721",
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:IERC721Receiver": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:262",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:Ownable": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1844",
        "inherit": [
          "contracts/tokens/officialTokens/BAYC-ERC721.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1852"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1845"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:SafeMath": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:350",
        "version": {
          "withMetadata": "4c06099fd663509871bd62cff956cab4cd4dc042c3033ea1b901b5fc3eec2252",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BAYC-ERC721.sol:Strings": {
        "src": "contracts/tokens/officialTokens/BAYC-ERC721.sol:1318",
        "version": {
          "withMetadata": "c5e23fb6c9f0e21bfcf3c0146de3217bb499d89cc328fcde3b4cc1535c4fd958",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:Arrays": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:267",
        "version": {
          "withMetadata": "092941910bd4c0d335bbf5ba0b1e0bb0ecc2b01f03a82b7947292c28b59d718a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:BitDAO": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:776",
        "version": {
          "withMetadata": "2b726970a2e74d2a2a276130713d597bb85de0f3815b1e388211cde27b1bd719",
          "withoutMetadata": "d233d3e063de2a9c4ec696f3dd0707d63153cdb2a2c0163b200b9aa0ee43c8a1",
          "linkedWithoutMetadata": "d233d3e063de2a9c4ec696f3dd0707d63153cdb2a2c0163b200b9aa0ee43c8a1"
        },
        "inherit": [
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:ERC20",
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:IERC20",
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:Context"
        ],
        "libraries": [
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:SafeMath",
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:Arrays",
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:Counters"
        ],
        "methods": [
          "(address)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "snapshot()",
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BitDAO",
            "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:833"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MAX_SUPPLY",
            "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:782"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:493"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:495"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:497"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:499"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:500"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:501"
            },
            {
              "label": "MAX_SUPPLY",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:782"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:784"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:786"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:788"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)7903_storage))",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:795"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:797"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:805"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_struct(Snapshots)7935_storage)",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:812"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(Snapshots)7935_storage",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:814"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(Counter)7232_storage",
              "contract": "BitDAO",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:816"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)7903_storage))": {
              "label": "mapping(address => mapping(uint256 => struct BitDAO.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)7935_storage)": {
              "label": "mapping(address => struct BitDAO.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Checkpoint)7903_storage)": {
              "label": "mapping(uint256 => struct BitDAO.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)7903_storage": {
              "label": "struct BitDAO.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)7232_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)7935_storage": {
              "label": "struct BitDAO.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:Context": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:365",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:Counters": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:325",
        "version": {
          "withMetadata": "3d1904c840ae858eb7cd8bfd1652c66acafd198f2783c2756b6454feb9dc8536",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:ERC20": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:490",
        "version": {
          "withMetadata": "ec6d08fe379a3d44fc70bb0e9b88704879d955c0f117194ed070c32ff7df9f8d",
          "withoutMetadata": "98dadf252b0780643101d90c3352aa6bdfc3149875f671f366401bf55b91e6e2",
          "linkedWithoutMetadata": "98dadf252b0780643101d90c3352aa6bdfc3149875f671f366401bf55b91e6e2"
        },
        "inherit": [
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:IERC20",
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:Context"
        ],
        "libraries": [
          "contracts/tokens/officialTokens/BitDao-ERC20.sol:SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:512"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:493"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:495"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:497"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:499"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:500"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:501"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:IERC20": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:385",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:Math": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:231",
        "version": {
          "withMetadata": "efcc71ee62556257f0d0bf34201b23e2b8df77831773b1c0257c62e226dad3d3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/tokens/officialTokens/BitDao-ERC20.sol:SafeMath": {
        "src": "contracts/tokens/officialTokens/BitDao-ERC20.sol:24",
        "version": {
          "withMetadata": "6177fb0a026ee2ee7d892859e2f015402dede5e57b99671c2d24b7367eaee7d4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/upgrade/WorldCupV1.sol:WorldCupV1": {
        "src": "contracts/upgrade/WorldCupV1.sol:7",
        "version": {
          "withMetadata": "b9236e42b34990441da9c8121c4a15ed4d29e8618181fe4a09e22687966e030c",
          "withoutMetadata": "e433880ff3257a3011ffde898d23414c4a3aa80f4c0debb525f238879d3ff07b",
          "linkedWithoutMetadata": "e433880ff3257a3011ffde898d23414c4a3aa80f4c0debb525f238879d3ff07b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "initialize(uint256)",
          "play(uint8)",
          "finialize(uint8)",
          "claimReward()",
          "getVaultBalance()",
          "getCountryPlayters(uint8,uint8)",
          "getPlayerInfo(uint8,address,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:16"
            },
            {
              "label": "currRound",
              "offset": 22,
              "slot": "0",
              "type": "t_uint8",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:17"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)9015_storage))",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:26"
            },
            {
              "label": "countryToPlayers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_mapping(t_enum(Country)8974,t_array(t_address)dyn_storage))",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:28"
            },
            {
              "label": "winnerVaults",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:32"
            },
            {
              "label": "deadline",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:42"
            },
            {
              "label": "lockedAmts",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WorldCupV1",
              "src": "contracts/upgrade/WorldCupV1.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Country)8974": {
              "label": "enum WorldCupV1.Country",
              "members": [
                "GERMANY",
                "FRANCH",
                "CHINA",
                "BRAZIL",
                "KOREA"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Player)9015_storage)": {
              "label": "mapping(address => struct WorldCupV1.Player)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)8974,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum WorldCupV1.Country => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)8974,t_uint256)": {
              "label": "mapping(enum WorldCupV1.Country => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)9015_storage))": {
              "label": "mapping(uint8 => mapping(address => struct WorldCupV1.Player))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_enum(Country)8974,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint8 => mapping(enum WorldCupV1.Country => address[]))",
              "numberOfBytes": "32"
            },
            "t_struct(Player)9015_storage": {
              "label": "struct WorldCupV1.Player",
              "members": [
                {
                  "label": "isSet",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "counts",
                  "type": "t_mapping(t_enum(Country)8974,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/upgrade/WorldCupV2.sol:WorldCupV2": {
        "src": "contracts/upgrade/WorldCupV2.sol:7",
        "version": {
          "withMetadata": "3dc0148be44afb0eb154a815efe52f3da094e7d3ba368ed472fa60629f2c7f77",
          "withoutMetadata": "a7452e44eb62eda11d49411c048a547b383ab8739b411b82fd022a459bd2436e",
          "linkedWithoutMetadata": "a7452e44eb62eda11d49411c048a547b383ab8739b411b82fd022a459bd2436e"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "initialize(uint256)",
          "play(uint8)",
          "finialize(uint8)",
          "claimReward()",
          "changeDeadline(uint256)",
          "getVaultBalance()",
          "getCountryPlayters(uint8,uint8)",
          "getPlayerInfo(uint8,address,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:16"
            },
            {
              "label": "currRound",
              "offset": 22,
              "slot": "0",
              "type": "t_uint8",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:17"
            },
            {
              "label": "changeCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:18"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)9464_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:27"
            },
            {
              "label": "countryToPlayers",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_mapping(t_enum(Country)9417,t_array(t_address)dyn_storage))",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:29"
            },
            {
              "label": "winnerVaults",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:33"
            },
            {
              "label": "deadline",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:43"
            },
            {
              "label": "lockedAmts",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WorldCupV2",
              "src": "contracts/upgrade/WorldCupV2.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Country)9417": {
              "label": "enum WorldCupV2.Country",
              "members": [
                "GERMANY",
                "FRANCH",
                "CHINA",
                "BRAZIL",
                "KOREA"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Player)9464_storage)": {
              "label": "mapping(address => struct WorldCupV2.Player)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)9417,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum WorldCupV2.Country => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Country)9417,t_uint256)": {
              "label": "mapping(enum WorldCupV2.Country => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_address,t_struct(Player)9464_storage))": {
              "label": "mapping(uint8 => mapping(address => struct WorldCupV2.Player))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_mapping(t_enum(Country)9417,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint8 => mapping(enum WorldCupV2.Country => address[]))",
              "numberOfBytes": "32"
            },
            "t_struct(Player)9464_storage": {
              "label": "struct WorldCupV2.Player",
              "members": [
                {
                  "label": "isSet",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "counts",
                  "type": "t_mapping(t_enum(Country)9417,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/utils/Initializable.sol:Initializable": {
        "src": "contracts/utils/Initializable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts/utils/Initializable.sol:5"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts/utils/Initializable.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/utils/Ownable.sol:Ownable": {
        "src": "contracts/utils/Ownable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPendingOwner(address)",
          "acceptOwner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/utils/Ownable.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/utils/Ownable.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/utils/Reentrant.sol:Reentrant": {
        "src": "contracts/utils/Reentrant.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "entered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Reentrant",
              "src": "contracts/utils/Reentrant.sol:5"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "56c1d0de2c6f18372a0eaa2f9c2f09d977158d44fbb38f25169d3e2e8e4de5b2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    }
  ]
}