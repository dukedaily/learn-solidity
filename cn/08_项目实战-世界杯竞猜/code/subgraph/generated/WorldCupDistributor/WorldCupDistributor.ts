// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DistributeReward extends ethereum.Event {
  get params(): DistributeReward__Params {
    return new DistributeReward__Params(this);
  }
}

export class DistributeReward__Params {
  _event: DistributeReward;

  constructor(event: DistributeReward) {
    this._event = event;
  }

  get merkleRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get settleBlockNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WorldCupDistributor__merkleDistributorsResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Bytes, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getMerkleRoot(): Bytes {
    return this.value0;
  }

  getIndex(): BigInt {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getSettleBlockNumber(): BigInt {
    return this.value3;
  }
}

export class WorldCupDistributor extends ethereum.SmartContract {
  static bind(address: Address): WorldCupDistributor {
    return new WorldCupDistributor("WorldCupDistributor", address);
  }

  claimRestTokens(to: Address): boolean {
    let result = super.call(
      "claimRestTokens",
      "claimRestTokens(address):(bool)",
      [ethereum.Value.fromAddress(to)]
    );

    return result[0].toBoolean();
  }

  try_claimRestTokens(to: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimRestTokens",
      "claimRestTokens(address):(bool)",
      [ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClaimed(index: BigInt, user: Address): boolean {
    let result = super.call("isClaimed", "isClaimed(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(index),
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isClaimed(index: BigInt, user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClaimed",
      "isClaimed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  merkleDistributors(
    param0: BigInt
  ): WorldCupDistributor__merkleDistributorsResult {
    let result = super.call(
      "merkleDistributors",
      "merkleDistributors(uint256):(bytes32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new WorldCupDistributor__merkleDistributorsResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_merkleDistributors(
    param0: BigInt
  ): ethereum.CallResult<WorldCupDistributor__merkleDistributorsResult> {
    let result = super.tryCall(
      "merkleDistributors",
      "merkleDistributors(uint256):(bytes32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WorldCupDistributor__merkleDistributorsResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimRestTokensCall extends ethereum.Call {
  get inputs(): ClaimRestTokensCall__Inputs {
    return new ClaimRestTokensCall__Inputs(this);
  }

  get outputs(): ClaimRestTokensCall__Outputs {
    return new ClaimRestTokensCall__Outputs(this);
  }
}

export class ClaimRestTokensCall__Inputs {
  _call: ClaimRestTokensCall;

  constructor(call: ClaimRestTokensCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimRestTokensCall__Outputs {
  _call: ClaimRestTokensCall;

  constructor(call: ClaimRestTokensCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DistributeRewardCall extends ethereum.Call {
  get inputs(): DistributeRewardCall__Inputs {
    return new DistributeRewardCall__Inputs(this);
  }

  get outputs(): DistributeRewardCall__Outputs {
    return new DistributeRewardCall__Outputs(this);
  }
}

export class DistributeRewardCall__Inputs {
  _call: DistributeRewardCall;

  constructor(call: DistributeRewardCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _settleBlockNumber(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DistributeRewardCall__Outputs {
  _call: DistributeRewardCall;

  constructor(call: DistributeRewardCall) {
    this._call = call;
  }
}
