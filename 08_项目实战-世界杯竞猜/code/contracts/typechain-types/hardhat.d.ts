/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMerkleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMerkleDistributor__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "FHTToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHTToken__factory>;
    getContractFactory(
      name: "BoredApeYachtClub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoredApeYachtClub__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BitDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BitDAO__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "WorldCupToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WorldCupToken__factory>;
    getContractFactory(
      name: "WorldCupV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WorldCupV1__factory>;
    getContractFactory(
      name: "WorldCupV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WorldCupV2__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "VerifySignature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifySignature__factory>;
    getContractFactory(
      name: "WorldCup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WorldCup__factory>;
    getContractFactory(
      name: "WorldCupDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WorldCupDistributor__factory>;
    getContractFactory(
      name: "WorldCupReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WorldCupReward__factory>;

    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IMerkleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMerkleDistributor>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "FHTToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FHTToken>;
    getContractAt(
      name: "BoredApeYachtClub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoredApeYachtClub>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "BitDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BitDAO>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "WorldCupToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WorldCupToken>;
    getContractAt(
      name: "WorldCupV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WorldCupV1>;
    getContractAt(
      name: "WorldCupV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WorldCupV2>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "VerifySignature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifySignature>;
    getContractAt(
      name: "WorldCup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WorldCup>;
    getContractAt(
      name: "WorldCupDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WorldCupDistributor>;
    getContractAt(
      name: "WorldCupReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WorldCupReward>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
